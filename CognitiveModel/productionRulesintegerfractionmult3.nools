import("typesintegerwfractionmult.nools");

rule Bootstrap {
    when {
        t: Boolean t == true from true;
    } then {
        // Membuat problem baru di working memory.
        // IE: wholenum, enum1, denom1, rewholenum, reenum1, redenom1, resenum, resdenom, simenum, simdenom
        
        // wn, en1, den1, wnie, enie1, denie1
        assert(new Problem(wholenumSoal, pemb2, peny2, "wholenum1","enum1","denom1"));

        // Bangun facts pada working memory
        // Fact perkalian dan hasil perkalian
        // multiplicationResult: wn, wnie, dpem1, dpem1ie, dpen1, dpen1ie, rpemIE, rpenIE
        assert(new multiplicationResult(null, "rewholenum", null, "reenum1", null, "redenom1", "resenum", "resdenom"));

        // Fact hasil akhir
        // finalres:spem, spen, spemIE, spenIE
        assert(new finalRes(null, null, "simenum", "simdenom"));

        //Fact Error Siswa
        // error:wn, erpm1, erpn1, rpm, rpn, spm, spn
        assert(new StudentError(0,0,0,0,0,0,0));


        printFacts(Problem);
        printFacts(multiplicationResult);
        printFacts(finalRes);
        
        // Inisiasi interfacenya
        //Soal
        assert(new TPA("wholenum1", "UpdateTextField", wholenumSoal));

        assert(new TPA("enum1", "UpdateTextField", pemb2));
        assert(new TPA("denom1", "UpdateTextField", peny2));

        //Fractionbar
        let stringfraction2 = "";

        //String Fractionbar 1
        for (var i = 0; i < pemb2; i++){
            if(i > 0){
                stringfraction2 = stringfraction2 + "+1/" + peny2;
            } else{
                stringfraction2 = stringfraction2 + "1/" + peny2;
            }
        }

        for (var i = 0; i < (peny2-pemb2); i++){
            stringfraction2 = stringfraction2 + "+(0*1/" + peny2 + ")";
        }
        console.log(stringfraction2);

        assert(new TPA("fractionb1", "SetPieces", stringfraction2));
        assert(new TPA("fractionb1", "lock", ""));

        setProblemAttribute("use_backtracking", true);
        setProblemAttribute("use_hint_fact", true);
        halt();
    }
}

// INPUT BILANGAN BULAT & BUGGY BILANGAN BULAT
rule enterWholeNumber {
    when {
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Multiplication Result untuk memamasukkan nilai aslinya...

        prb: Problem
        {wholenum: wn};

        mu: multiplicationResult mu.done == false && mu.wholenumber == null
        {wholenumber: wnmu, wholenumberIE: wnmuie};
    } then {
        let sol = wn;

        let hintMessage = "Pada bagian ini kamu diminta untuk memasukkan nilai bilangan bulat pada soal di atas ya!";
        assert(new Hint(hintMessage));

        if(checkSAI({selection: wnmuie, action: "UpdateTextField", input: sol})){
            setSuccessOrBugMsg("<html>Yay kamu benar! Ayo lanjut mengisi bagian pecahan!</html>");
            modify(mu, "wholenumber", sol);
            halt();
        } else{
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");

    }
}

rule buggyenterWholeNumber1 {
    salience: -2;
    when {
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Multiplication Result untuk memamasukkan nilai aslinya...
        // 3. Error student
        se: StudentError se.errorWholenum == 0
        {errorWholenum: ewn};
        
        prb: Problem
        {wholenum: wn};

        mu: multiplicationResult mu.done == false && mu.wholenumber == null
        {wholenumber: wnmu, wholenumberIE: wnmuie};
    } then {
        let sol = wn;

        if(checkSAI({selection: wnmuie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai bilangan bulat pada soal ke dalam bagian bilangan bulat (kiri)!</html>");
            modify(se, "errorWholenum", 1);
            halt();
        } else{
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");

    }
}

rule buggyenterWholeNumber2 {
    salience: -1;
    when {
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Multiplication Result untuk memamasukkan nilai aslinya...
        // 3. Error student
        se: StudentError se.errorWholenum == 1
        {errorWholenum: ewn};
        
        prb: Problem
        {wholenum: wn};

        mu: multiplicationResult mu.done == false && mu.wholenumber == null
        {wholenumber: wnmu, wholenumberIE: wnmuie};
    } then {
        let sol = wn;

        if(checkSAI({selection: wnmuie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai <b>" + sol + " </b> ke dalam bagian bilangan bulat (kiri)!</html>");
            modify(se, "errorWholenum", 1);
            halt();
        } else{
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");        

    }
}

// INPUT PECAHAN & BUGGY PECAHAN
rule enterPecahan {
    when {
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Pecahan utk memamasukkan nilai pecahan...

        prb: Problem
        {pembilang1: pem1, penyebut1: pen1};

        mu: multiplicationResult mu.done == false && (mu.depembilang1 == null || mu.depenyebut1 == null)
        {depembilang1: depem1, depenyebut1: depen1, depembilang1IE: depemie, depenyebut1IE: depenie};
    } then {
        let solpem = pem1;
        let solpen = pen1;

        let hintMessage = "Pada bagian ini kamu diminta untuk memasukkan nilai pecahan. Ingat bahwa pembilang adalah bilangan di atas dan penyebut adalah bilangan di bawah";
        assert(new Hint(hintMessage));

        if(checkSAI({selection: depemie, action: "UpdateTextField", input: solpem})){
            setSuccessOrBugMsg("<html>Keren kamu benar! Ayo lanjut bagian berikutnya!</html>");
            modify(mu, "depembilang1", solpem);
            halt();
        } else if (checkSAI({selection: depenie, action: "UpdateTextField", input: solpen})){
            setSuccessOrBugMsg("<html>Hebat kamu benar! Ayo lanjut bagian berikutnya!</html>");
            modify(mu, "depenyebut1", solpen);
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");       

    }
}

rule buggyEnterPecahan1{
    salience: -2;
    when{
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Pecahan utk memamasukkan nilai pecahan...
        // 3. Student Error
        se: StudentError se.errorPembilang1 == 0 || se.errorPenyebut1 == 0
        {errorPembilang1: epm, errorPenyebut1: epn};
        
        prb: Problem
        {pembilang1: pem1, penyebut1: pen1};

        mu: multiplicationResult mu.done == false && (mu.depembilang1 == null || mu.depenyebut1 == null)
        {depembilang1: depem1, depenyebut1: depen1, depembilang1IE: depemie, depenyebut1IE: depenie};

    } then{

        if(checkSAI({selection: depemie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai bilangan bulat pada soal ke dalam bagian bilangan bulat (kiri)!</html>");
            modify(se, "errorPembilang1", 1);
            halt();
        } else if(checkSAI({selection: depenie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai bilangan bulat pada soal ke dalam bagian bilangan bulat (kiri)!</html>");
            modify(se, "errorPenyebut1", 1);
            halt();
        } else{
            backtrack();
        }
        

        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");       
    }
}

rule buggyEnterPecahan2{
    salience: -1;
    when{
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Pecahan utk memamasukkan nilai pecahan...
        // 3. Student Error
        se: StudentError se.errorPembilang1 == 1 || se.errorPenyebut1 == 1
        {errorPembilang1: epm, errorPenyebut1: epn};
        
        prb: Problem
        {pembilang1: pem1, penyebut1: pen1};

        mu: multiplicationResult mu.done == false && (mu.depembilang1 == null || mu.depenyebut1 == null)
        {depembilang1: depem1, depenyebut1: depen1, depembilang1IE: depemie, depenyebut1IE: depenie};

    } then{
        let solpem = pem1;
        let solpen = pen1;

        if(checkSAI({selection: depemie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai <b>" + solpem + " </b> ke dalam bagian pembilang!</html>");
            modify(se, "errorPembilang1", 1);
            halt();
        } else if(checkSAI({selection: depenie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai <b>" + solpen + " </b> ke dalam bagian penyebut pecahan!</html>");
            modify(se, "errorPenyebut1", 1);
            halt();
        } else{
            backtrack();
        }
        

        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");       
    }
}

// INPUT HASIL PERKALIAN & BUGGY HASIL PERKALIAN
rule enterResultPerkalian {
    when {
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Multiplication Result untuk memamasukkan nilai pecahan...

        prb: Problem
        {wholenum: wn, pembilang1: pem1, penyebut1: pen1};

        mu: multiplicationResult mu.done == false && mu.depembilang1 != null && mu.depenyebut1 != null && mu.wholenumber != null && (mu.repembilang == null || mu.repenyebut == null)
        {depembilang1: depem1, depenyebut1: depen1, repembilang: repem, repenyebut: repen, repemIE: repemie, repenIE: repenie};
    } then {
        let solpem = pem1 * wn;
        let solpen = pen1;

        let hintMessage = "Pada bagian ini kamu diminta untuk memasukkan hasil perkalian dari bilangan bulat dan pecahan. (tanpa disederhanakan)";
        assert(new Hint(hintMessage));

        hintMessage = "Kamu bisa memanfaatkan visualisasi di samping, hitunglah jumlah kotak ungu tua dibagi dengan banyaknya kotak dengan jumlah kotak dalam satu baris.";
        assert(new Hint(hintMessage));

        if(checkSAI({selection: repemie, action: "UpdateTextField", input: solpem}) && mu.repenyebut != null){
            setSuccessOrBugMsg("<html>Wah hebat, kamu benar! Selanjutnya ayo kita sederhanakan pecahan ini!</html>");
            modify(mu, "repembilang", solpem);
            modify(mu, "done", true);
            halt();
        } else if (checkSAI({selection: repenie, action: "UpdateTextField", input: solpen}) && mu.repembilang != null){
            setSuccessOrBugMsg("<html>Wah keren, kamu benar! Selanjutnya ayo kita sederhanakan pecahan ini!</html>");
            modify(mu, "repenyebut", solpen);
            modify(mu, "done", true);
            halt();
        } else if(checkSAI({selection: repemie, action: "UpdateTextField", input: solpem})){
            setSuccessOrBugMsg("<html>Wah hebat, kamu benar! Ayo lanjut bagian yang masih kosong!</html>");
            modify(mu, "repembilang", solpem);
            halt();
        } else if (checkSAI({selection: repenie, action: "UpdateTextField", input: solpen})){
            setSuccessOrBugMsg("<html>Wah keren, kamu benar! Ayo lanjut bagian yang masih kosong!</html>");
            modify(mu, "repenyebut", solpen);
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");       

    }
}

rule buggyenterResultPerkalian1 {
    salience: -2;
    when {
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Multiplication Result untuk memamasukkan nilai pecahan...
        // 3. Student error untuk submit.

        se: StudentError se.errorResPembilang == 0 || se.errorResPenyebut == 0
        {errorResPembilang: erspm, errorResPenyebut: erspn};

        prb: Problem
        {wholenum: wn, pembilang1: pem1, penyebut1: pen1};

        mu: multiplicationResult mu.done == false && mu.depembilang1 != null && mu.depenyebut1 != null && mu.wholenumber != null && (mu.repembilang == null || mu.repenyebut == null)
        {depembilang1: depem1, depenyebut1: depen1, repembilang: repem, repenyebut: repen, repemIE: repemie, repenIE: repenie};
    } then {
        let solpem = pem1 * wn;
        let solpen = pen1;

        if(checkSAI({selection: repemie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai hasil perkalian pembilang dengan bilangan bulat ya!</html>");
            modify(se, "errorResPembilang", 1);
            halt();
        } else if (checkSAI({selection: repenie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan kembali nilai penyebutnya ya!</html>");
            modify(se, "errorResPenyebut", 1);
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");       

    }
}

rule buggyenterResultPerkalianPembilang2 {
    salience: -1;
    when {
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Multiplication Result untuk memamasukkan nilai pecahan...
        // 3. Student error untuk submit.

        se: StudentError se.errorResPembilang == 1
        {errorResPembilang: erspm, errorResPenyebut: erspn};

        prb: Problem
        {wholenum: wn, pembilang1: pem1, penyebut1: pen1};

        mu: multiplicationResult mu.done == false && mu.depembilang1 != null && mu.depenyebut1 != null && mu.wholenumber != null && (mu.repembilang == null || mu.repenyebut == null)
        {depembilang1: depem1, depenyebut1: depen1, repembilang: repem, repenyebut: repen, repemIE: repemie, repenIE: repenie};
    } then {
        let solpem = pem1 * wn;
        let solpen = pen1;

        if(checkSAI({selection: repemie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai <b>" + solpem + " </b> ke dalam bagian hasil perkalian pembilang!</html>");
            modify(se, "errorResPembilang", 1);
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");       

    }
}

rule buggyenterResultPerkalianPenyebut2 {
    salience: -1;
    when {
        // Ambil informasi berikut:
        // 1. Problem
        // 2. Multiplication Result untuk memamasukkan nilai pecahan...
        // 3. Student error untuk submit.

        se: StudentError se.errorResPenyebut == 1
        {errorResPembilang: erspm, errorResPenyebut: erspn};

        prb: Problem
        {wholenum: wn, pembilang1: pem1, penyebut1: pen1};

        mu: multiplicationResult mu.done == false && mu.depembilang1 != null && mu.depenyebut1 != null && mu.wholenumber != null && (mu.repembilang == null || mu.repenyebut == null)
        {depembilang1: depem1, depenyebut1: depen1, repembilang: repem, repenyebut: repen, repemIE: repemie, repenIE: repenie};
    } then {
        let solpem = pem1 * wn;
        let solpen = pen1;

        if (checkSAI({selection: repenie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Masukkan nilai <b>" + solpen + " </b> ke dalam bagian hasil perkalian penyebut!</html>");
            modify(se, "errorResPenyebut", 1);
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");       

    }
}


// INPUT HASIL FINAL && BUGGY HASIL FINAL
rule simplifiedFinal{
    when{
        // Hanya bisa dilakukan apabila task sebelumnya telah selesai
        prb: Problem
        {done: dn};

        mu: multiplicationResult mu.done == true && mu.repembilang != null && mu.repenyebut != null
        {repemIE: rpemie, repenIE: rpenie, repembilang: rpem, repenyebut: rpen};

        // Ambil fact tentang hasil akhir
        fr: finalRes fr.simpembilang == null || fr.simpenyebut == null
        {simpembilang: pem, simpenyebut: peny, simpenIE: penie,simpemIE: pemie};
    }then{
        let finalpem = 0;
        let finalpen = 0;
        let repem = rpem;

        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);

        let hintMessage = "Pada bagian kali ini silahkan masukkan hasil pecahan yang disederhanakan";
        assert(new Hint(hintMessage));

        hintMessage = "Coba pikirkan, apakah pembilang dan penyebut bisa dibagi angka yang sama? Mulailah dengan angka kecil seperti 2, 3, atau 5. Angka apa yang bisa membagi kedua angka ini tanpa sisa?";
        assert(new Hint(hintMessage));

        // Kalau pembilang == 1, otomatis tidak ada lagi penyederhanaan, set pembilang dan penyebut sama seperti hasil sebelumnya
        if(finalpem == 0 && finalpen == 0 && repem == 1){
            finalpem = rpem;
            finalpen = rpen;
        } else {
            // Kalau bukan coba cari faktor pembilangnya untuk mendapatkan nilai paling sederhana
            for (var i = 2; i <= rpem; i++){
                if(rpen % i == 0 && rpem % i == 0){
                    finalpem = rpem / i;
                    finalpen = rpen / i;
                }
            }

            // Kalau tidak ketemu, otomatis tidak ada penyederhanaan juga.
            if(finalpem == 0 && finalpen == 0){
                finalpem = rpem;
                finalpen = rpen;
            }
        }

        if(checkSAI({selection:penie, action:"UpdateTextField",input: finalpen}) && fr.simpembilang != null){
            modify(fr, "simpenyebut", finalpen);
            modify(prb, "done", true);
            setSuccessOrBugMsg("<html>Keren kamu benar! Klik tombol done untuk menyelesaikan soal ini!</html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: finalpem}) && fr.simpenyebut != null){
            modify(fr, "simpembilang", finalpem);
            modify(prb, "done", true);
            setSuccessOrBugMsg("<html>Keren kamu benar! Klik tombol done untuk menyelesaikan soal ini!</html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: finalpem})){
            modify(fr, "simpembilang", finalpem);
            setSuccessOrBugMsg("<html>Keren kamu benar! Ayo lanjut bagian berikutnya!</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: finalpen})){
            modify(fr, "simpenyebut", finalpen);
            setSuccessOrBugMsg("<html>Keren kamu benar! Ayo lanjut bagian berikutnya!</html>");
            halt();
        }else {
            backtrack();
        }

        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");

    }
}

rule buggySimplifiedFinal0 {
    salience: -2;
    when{
        // Error Student 
        se: StudentError
        {errorSimplifiedPembilang: espm1, errorSimplifiedPenyebut: espn1};

        // Hanya bisa dilakukan apabila task sebelumnya telah selesai
        prb: Problem
        {done: dn};

        mu: multiplicationResult mu.done == true && mu.repembilang != null && mu.repenyebut != null
        {repemIE: rpemie, repenIE: rpenie, repembilang: rpem, repenyebut: rpen};

        // Ambil fact tentang hasil akhir
        fr: finalRes fr.simpembilang == null || fr.simpenyebut == null
        {simpembilang: pem, simpenyebut: peny, simpenIE: penie,simpemIE: pemie};
    } then {
        let finalpem = 0;
        let finalpen = 0;
        let repem = rpem;
        let bugpem = 0;
        let bugpen = 0;

        if(finalpem == 0 && finalpen == 0 && repem == 1){
            finalpem = rpem;
            finalpen = rpen;
        } else {
            for (var i = 2; i <= rpem; i++){
                if(rpen % i == 0 && rpem % i == 0){
                    finalpem = rpem / i;
                    finalpen = rpen / i;
                }
            }

            if(finalpem == 0 && finalpen == 0){
                finalpem = rpem;
                finalpen = rpen;
            } else{
                bugpem = finalpem * 2;
                bugpen = finalpen * 2;
            }
        }

        if(checkSAI({selection:pemie, action:"UpdateTextField",input: bugpem}, null, true) && bugpem == 0){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Nilai <b>" + bugpem + " </b> bukanlah jawaban sederhana ya</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: bugpen}, null, true) && bugpen == 0){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Nilai <b>" + bugpen + " </b> bukanlah jawaban sederhana ya</html>");
            halt();
        }else if(checkSAI({selection:pemie, action:"UpdateTextField",input: bugpem}, null, true)){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Nilai <b>" + bugpem + " </b> masih bisa disederhanakan lagi ya</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: bugpen}, null, true)){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Nilai <b>" + bugpen + " </b> masih bisa disederhanakan lagi ya</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: "don't_care"}, null, true) && fr.simpembilang != null){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Ingat bahwa sederhana berarti tidak ada lagi bilangan selain 1 yang dapat membagi pecahan tersebut</html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: "don't_care"}, null, true) && fr.simpenyebut != null){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Ingat bahwa sederhana berarti tidak ada lagi bilangan selain 1 yang dapat membagi pecahan tersebut</html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: "don't_care"}, null, true)){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Ingat bahwa sederhana berarti tidak ada lagi bilangan selain 1 yang dapat membagi pecahan tersebut</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: "don't_care"}, null, true)){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Ingat bahwa sederhana berarti tidak ada lagi bilangan selain 1 yang dapat membagi pecahan tersebut</html>");
            halt();
        } else {
            backtrack();
        }
    }
}

rule buggySimplifiedFinal1{
    salience: -1;
    when{
        // Error Student 
        se: StudentError se.errorSimplifiedPembilang == 1 || se.errorSimplifiedPenyebut == 1
        {errorSimplifiedPembilang: espm1, errorSimplifiedPenyebut: espn1};

        // Hanya bisa dilakukan apabila task sebelumnya telah selesai
        prb: Problem
        {done: dn};

        mu: multiplicationResult mu.done == true && mu.repembilang != null && mu.repenyebut != null
        {repemIE: rpemie, repenIE: rpenie, repembilang: rpem, repenyebut: rpen};

        // Ambil fact tentang hasil akhir
        fr: finalRes fr.simpembilang == null || fr.simpenyebut == null
        {simpembilang: pem, simpenyebut: peny, simpenIE: penie,simpemIE: pemie};
    }then {
        let finalpem = 0;
        let finalpen = 0;
        let repem = rpem;
        let bugpem = 0;
        let bugpen = 0;

        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);

        if(finalpem == 0 && finalpen == 0 && repem == 1){
            finalpem = rpem;
            finalpen = rpen;
        } else {
            for (var i = 2; i <= rpem; i++){
                if(rpen % i == 0 && rpem % i == 0){
                    finalpem = rpem / i;
                    finalpen = rpen / i;
                }
            }

            if(finalpem == 0 && finalpen == 0){
                finalpem = rpem;
                finalpen = rpen;
            } else{
                bugpem = finalpem * 2;
                bugpen = finalpen * 2;
            }
        }
        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);
        console.log("bugpem: " + bugpem);

        if(checkSAI({selection:penie, action:"UpdateTextField",input: "don't_care"}, null, true) && espn1 == 1){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Masukkan nilai <b>" + finalpen + "</b> </html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: "don't_care"}, null, true) && espm1 == 1){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Masukkan nilai <b>" + finalpem + "</b> </html>");
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
    }
}

rule DoneRule {
    when {
        // Priksa kalau semua komponen sudah terisi
        prb : Problem prb.done == true;
    }
    then {
        let hintMessage = "Klik tombol 'Done' untuk menyelesaikan problem ini";
        assert(new Hint(hintMessage));

        
        if (checkSAI({selection: "done", action: "ButtonPressed", input: "don't_care"})) {
            halt(); 
        } else {
            backtrack(); 
        }
    }
}