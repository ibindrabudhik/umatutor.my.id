import("typesfractionwfractionmult.nools");

rule Bootstrap {
    when {
        t: Boolean t == true from true;
    } then {
        // Membuat problem baru di working memory.
        assert(new Problem(pemb1, pemb2, peny1, peny2, "enum1", "enum2", "denom1", "denom2"));

        // Bangun facts pada working memory
        assert(new multiplicationResult(null, null, "enumult1","enumult2",null, null, "denomult1","denomult2","enres","denores"));

        assert(new finalRes(null, null, "enfinal", "denfinal"));

        //Fact Error Siswa
        assert(new StudentError(0,0,0,0,0,0,0,0));


        printFacts(Problem);
        printFacts(multiplicationResult);
        printFacts(finalRes);
        
        // Inisiasi interfacenya
        //Soal
        assert(new TPA("enum1", "UpdateTextField", pemb1));
        assert(new TPA("enum2", "UpdateTextField", pemb2));

        assert(new TPA("denom1", "UpdateTextField", peny1));
        assert(new TPA("denom2", "UpdateTextField", peny2));

        //Fractionbar
        let stringfraction1 = "";
        let stringfraction2 = "";

        //String Fractionbar 1
        for (var i = 0; i < pemb1; i++){
            if(i > 0){
                stringfraction1 = stringfraction1 + "+1/" + peny1;
            } else{
                stringfraction1 = stringfraction1 + "1/" + peny1;
            }
        }

        for (var i = 0; i < (peny1-pemb1); i++){
            stringfraction1 = stringfraction1 + "+(0*1/" + peny1 + ")";
        }

        //String Fractionbar 2
        for (var i = 0; i < pemb2; i++){
            if(i > 0){
                stringfraction2 = stringfraction2 + "+1/" + peny2;
            } else{
                stringfraction2 = stringfraction2 + "1/" + peny2;
            }
        }

        for (var i = 0; i < (peny2-pemb2); i++){
            stringfraction2 = stringfraction2 + "+(0*1/" + peny2 + ")";
        }
        console.log(stringfraction1);
        console.log(stringfraction2);

        assert(new TPA("fractionbar1", "SetPieces", stringfraction1));
        assert(new TPA("fractionbar1", "lock", ""));
        assert(new TPA("fractionbar2", "SetPieces", stringfraction2));
        assert(new TPA("fractionbar2", "lock", ""));

        setProblemAttribute("use_backtracking", true);
        setProblemAttribute("use_hint_fact", true);
        halt();
    }
}

rule enterPembilang{
    salience: 1;
    when{
        // Ambil informasi berikut:
        // 1. fact yang belum memiliki hasil.
        se: StudentError
        {errorPembilang1: epm1, errorPembilang2: epm2};

        prb: Problem
        {pembilang1: pb1, pembilang2: pb2};

        mu: multiplicationResult mu.done == false && (mu.depembilang1 == null || mu.depembilang2 == null)
        {done: dn, depembilang1: dpm1, depembilang2: dpm2, depembilang1IE: dpm1ie, depembilang2IE: dpm2ie, repemIE: rpemie, repenIE: rpenie};
        
    } then {
        let solpm1 = pb1;
        let solpm2 = pb2;

        let hintMessage = "Pada bagian ini kamu diminta untuk memasukkan pembilang pecahan. Pembilang pertama di sebelah kiri dan pembilang kedua di sebelah kanan";
        assert(new Hint(hintMessage));

        if(checkSAI({selection: dpm1ie, action: "UpdateTextField", input: solpm1})){
            setSuccessOrBugMsg("<html>Hebat, kamu benar! Ayo lanjut mengisi bagian berikutnya!</html>");
            modify(mu, "depembilang1", solpm1);
            halt();
        } else if(checkSAI({selection: dpm2ie, action: "UpdateTextField", input: solpm2})){
            setSuccessOrBugMsg("<html>Keren, kamu benar! Ayo lanjut mengisi bagian berikutnya!</html>");
            modify(mu, "depembilang2", solpm2);
            halt();
        } else{
            backtrack();
        }

        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts(Problem);
    }
}



rule enterPenyebut{
    when{
        // Ambil informasi berikut:
        // 1. fact yang belum memiliki hasil.

        prb: Problem
        {penyebut1: pen1, penyebut2: pen2};

        mu: multiplicationResult mu.done == false && (mu.depenyebut1 == null || mu.depenyebut2 == null)
        {done: dn, depenyebut1: dpn1, depenyebut2: dpn2, depenyebut1IE: dpn1ie, depenyebut2IE: dpn2ie, repemIE: rpemie, repenIE: rpenie};
    } then {
        let solpn1 = pen1;
        let solpn2 = pen2;

        let hintMessage = "Pada bagian ini kamu diminta untuk memasukkan penyebut pecahan. Penyebut pertama di sebelah kiri dan penyebut kedua di sebelah kanan";
        assert(new Hint(hintMessage));

        if(checkSAI({selection: dpn1ie, action: "UpdateTextField", input: solpn1})){
            setSuccessOrBugMsg("<html>Hebat kamu benar! Ayo lanjut bagian yang masih kosong!</html>");
            modify(mu, "depenyebut1", solpn1);
            halt();
        } else if(checkSAI({selection: dpn2ie, action: "UpdateTextField", input: solpn2})){
            setSuccessOrBugMsg("<html>Keren kamu benar! Ayo lanjut bagian yang masih kosong!</html>");
            modify(mu, "depenyebut2", solpn2);
            halt();
        } else {
            backtrack();
        }

        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts(Problem);
    }
}

rule buggyEnterPembilangError0{
    salience: -2;
    when{
        se: StudentError
        {errorPembilang1: epm1, errorPembilang2: epm2};

        prb: Problem
        {pembilang1: pb1, pembilang2: pb2};

        mu: multiplicationResult mu.done == false && (mu.depembilang1 == null || mu.depembilang2 == null)
        {done: dn, depembilang1: dpm1, depembilang2: dpm2, depembilang1IE: dpm1ie, depembilang2IE: dpm2ie, repemIE: rpemie, repenIE: rpenie};

    }then{
        if(checkSAI({selection: dpm1ie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            modify(se, "errorPembilang1", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Letakkan nilai pecahan pertama (atas) di sebelah kiri dan pecahan kedua (bawah) di sebelah kanan!</html>");
            halt();
        } else if (checkSAI({selection: dpm2ie, action: "UpdateTextField", input: "don't_care"}, null, true)) {
            modify(se, "errorPembilang2", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Letakkan nilai pecahan pertama (atas) di sebelah kiri dan pecahan kedua (bawah) di sebelah kanan!</html>");
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts(StudentError);
    }
}

rule buggyEnterPembilangError1{
    salience: -1;
    when{
        se: StudentError se.errorPembilang1 == 1 || se.errorPembilang2 == 1
        {errorPembilang1: epm1, errorPembilang2: epm2};

        prb: Problem
        {pembilang1: pb1, pembilang2: pb2};

        mu: multiplicationResult mu.done == false && (mu.depembilang1 == null || mu.depembilang2 == null)
        {done: dn, depembilang1: dpm1, depembilang2: dpm2, depembilang1IE: dpm1ie, depembilang2IE: dpm2ie, repemIE: rpemie, repenIE: rpenie};

    }then{
        let solpem1 = pb1;
        let solpem2 = pb2;
        if(checkSAI({selection: dpm1ie, action: "UpdateTextField", input: "don't_care"}, null, true) && epm1 == 1){
            modify(se, "errorPembilang1", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Letakkan nilai <b>"+ solpem1 +"</b> pada pembilang pecahan di sebelah kiri!</html>");
            halt();
        } else if (checkSAI({selection: dpm2ie, action: "UpdateTextField", input: "don't_care"}, null, true) && epm2 == 1) {
            modify(se, "errorPembilang2", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Letakkan nilai <b>"+ solpem2 +"</b> pada pembilang pecahan di sebelah kanan!</html>");
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts(StudentError);
    }
}


rule buggyEnterPenyebutError0{
    salience: -2;
    when{
        se: StudentError
        {errorPenyebut1: epn1, errorPenyebut2: epn2};

        prb: Problem
        {penyebut1: pen1, penyebut2: pen2};

        mu: multiplicationResult mu.done == false && (mu.depenyebut1 == null || mu.depenyebut2 == null)
        {done: dn, depenyebut1: dpn1, depenyebut2: dpn2, depenyebut1IE: dpn1ie, depenyebut2IE: dpn2ie, repemIE: rpemie, repenIE: rpenie};

    }then{
        if(checkSAI({selection: dpn1ie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            modify(se, "errorPenyebut1", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Letakkan nilai pecahan pertama (atas) di sebelah kiri dan pecahan kedua (bawah) di sebelah kiri!</html>");
            halt();
        } else if (checkSAI({selection: dpn2ie, action: "UpdateTextField", input: "don't_care"}, null, true)) {
            modify(se, "errorPenyebut2", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Letakkan nilai pecahan pertama (atas) di sebelah kiri dan pecahan kedua (bawah) di sebelah kanan!</html>");
            halt();
        }else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts(StudentError);
    }
}

rule buggyEnterPenyebutError1{
    salience: -1;
    when{
        se: StudentError se.errorPenyebut1 == 1 || se.errorPenyebut2 == 1
        {errorPenyebut1: epn1, errorPenyebut2: epn2};

        prb: Problem
        {penyebut1: pen1, penyebut2: pen2};

        mu: multiplicationResult mu.done == false && (mu.depenyebut1 == null || mu.depenyebut2 == null)
        {done: dn, depenyebut1: dpn1, depenyebut2: dpn2, depenyebut1IE: dpn1ie, depenyebut2IE: dpn2ie, repemIE: rpemie, repenIE: rpenie};

    }then{
        let solpen1 = pen1;
        let solpen2 = pen2;
        if(checkSAI({selection: dpn1ie, action: "UpdateTextField", input: "don't_care"}, null, true) && epn1 == 1){
            modify(se, "errorPenyebut1", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Letakkan nilai <b>"+ solpen1 +"</b> pada penyebut pecahan di sebelah kiri!</html>");
            halt();
        } else if (checkSAI({selection: dpn2ie, action: "UpdateTextField", input: "don't_care"}, null, true) && epn2 == 1) {
            modify(se, "errorPenyebut2", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Letakkan nilai <b>"+ solpen2 +"</b> pada penyebut pecahan di sebelah kanan!</html>");
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts(StudentError);
    }
}


rule partoneDone {
    when{
        mu: multiplicationResult mu.done == false && (mu.repembilang == null || mu.repenyebut == null) && mu.depembilang1 != null && mu.depembilang2 != null
        {done: dn, depembilang1: dpm1, depembilang2: dpm2, depenyebut1: dpn1, depenyebut2: dpn2, depembilang1IE: dpm1ie, depembilang2IE: dpm2ie, depenyebut1IE: dpn1ie, depenyebut2IE: dpn2ie, repemIE: rpemie, repenIE: rpenie};
    }then{
        let solpem = dpm1 * dpm2;
        let solpen = dpn1 * dpn2;
        // console.log("TEST INI " + parseInt(document.getElementById(rpemie).querySelector('input').value));
        let hintMessage = "Pada bagian kali ini silahkan masukkan hasil perkalian pecahan tanpa disederhanakan";
        assert(new Hint(hintMessage));
        hintMessage = "Kamu bisa menggunakan visualisasi disamping untuk melihat warna yang beririsan dibagi dengan seluruh kotak yang diberi warna";
        assert(new Hint(hintMessage));

        if(checkSAI({selection: rpemie, action: "UpdateTextField", input: solpem}) && mu.repenyebut!= null){
            setSuccessOrBugMsg("<html>Hebat, kamu sudah melakukan perkalian dengan benar! Sekarang ayo kita sederhanakan!</html>");
            modify(mu, "repembilang", solpem);
            modify(mu, "done", true);
            halt();
        }else if(checkSAI({selection: rpenie, action: "UpdateTextField", input: solpen}) && mu.repembilang != null){
            setSuccessOrBugMsg("<html>Hebat, kamu sudah melakukan perkalian dengan benar! Sekarang ayo kita sederhanakan!</html>");
            modify(mu, "repenyebut", solpen);
            modify(mu, "done", true);
            halt();
        }else if(checkSAI({selection: rpemie, action: "UpdateTextField", input: solpem})){
            setSuccessOrBugMsg("<html>Yay kamu benar! Ayo isi bagian yang masih kosong!</html>");
            modify(mu, "repembilang", solpem);
            halt();
        } else if(checkSAI({selection: rpenie, action: "UpdateTextField", input: solpen})){
            setSuccessOrBugMsg("<html>Yay kamu benar! Ayo lanjut mengisi bagian yang masih kosong!</html>");
            modify(mu, "repenyebut", solpen);
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts(multiplicationResult);
    }
}

// BUGGY partoneDone
rule buggyPartoneDone {
    salience: -2;
    when{
        // Masukkan memory error students
        se: StudentError se.errorResPembilang == 0 || se.errorResPenyebut == 0
        {errorResPembilang: ers1, errorResPenyebut: ers2};

        mu: multiplicationResult mu.done == false && (mu.repembilang == null || mu.repenyebut == null) && mu.depembilang1 != null && mu.depembilang2 != null
        {done: dn, depembilang1: dpm1, depembilang2: dpm2, depenyebut1: dpn1, depenyebut2: dpn2, depembilang1IE: dpm1ie, depembilang2IE: dpm2ie, depenyebut1IE: dpn1ie, depenyebut2IE: dpn2ie, repemIE: rpemie, repenIE: rpenie};
    }then{
        let solpem = dpm1 * dpm2;
        let solpen = dpn1 * dpn2;
        
        let hintMessage = "Pada bagian kali ini silahkan masukkan hasil perkalian pecahan tanpa disederhanakan";
        assert(new Hint(hintMessage));
        hintMessage = "Kamu bisa menggunakan visualisasi disamping untuk melihat warna yang beririsan dibagi dengan seluruh kotak yang diberi warna";
        assert(new Hint(hintMessage));

        if(checkSAI({selection: rpemie, action: "UpdateTextField", input: "don't_care"}, null, true) && mu.repenyebut!= null){
            modify(se, "errorResPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Isi bagian tersebut dengan hasil perkalian dari pembilang kedua pecahan ya!</html>");
            halt();
        }else if(checkSAI({selection: rpenie, action: "UpdateTextField", input: "don't_care"}, null, true) && mu.repembilang != null){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Isi bagian tersebut dengan hasil perkalian dari penyebut kedua pecahan ya!</html>");
            modify(se, "errorResPenyebut", 1);
            halt();
        }else if(checkSAI({selection: rpemie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Isi bagian tersebut dengan hasil perkalian dari pembilang kedua pecahan ya!</html>");
            modify(se, "errorResPembilang", 1);
            halt();
        } else if(checkSAI({selection: rpenie, action: "UpdateTextField", input: "don't_care"}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar. Isi bagian tersebut dengan hasil perkalian dari penyebut kedua pecahan ya!</html>");
            modify(se, "errorResPenyebut", 1);
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts(multiplicationResult);
    }
}

rule buggyPartoneDone2 {
    salience: -1;
    when{
        // Masukkan memory error students
        se: StudentError se.errorResPembilang == 1 || se.errorResPenyebut == 1
        {errorResPembilang: ers1, errorResPenyebut: ers2};

        mu: multiplicationResult mu.done == false && (mu.repembilang == null || mu.repenyebut == null) && mu.depembilang1 != null && mu.depembilang2 != null
        {done: dn, depembilang1: dpm1, depembilang2: dpm2, depenyebut1: dpn1, depenyebut2: dpn2, depembilang1IE: dpm1ie, depembilang2IE: dpm2ie, depenyebut1IE: dpn1ie, depenyebut2IE: dpn2ie, repemIE: rpemie, repenIE: rpenie};
    }then{
        let solpem = dpm1 * dpm2;
        let solpen = dpn1 * dpn2;
        let finalpem = 0;
        let finalpen = 0;
        let repem = dpm1 * dpm2;
        let repen = dpn1 * dpn2;

        

        // Kalau pembilang == 1, otomatis tidak ada lagi penyederhanaan, set pembilang dan penyebut sama seperti hasil sebelumnya
        if(finalpem == 0 && finalpen == 0 && repem == 1){
            finalpem = repem;
            finalpen = repen;
        } else {
            // Kalau bukan coba cari faktor pembilangnya untuk mendapatkan nilai paling sederhana
            for (var i = 2; i <= repem; i++){
                if(repen % i == 0 && repem % i == 0){
                    finalpem = repem / i;
                    finalpen = repen / i;
                }
            }

            // Kalau tidak ketemu, otomatis tidak ada penyederhanaan juga.
            if(finalpem == 0 && finalpen == 0){
                finalpem = repem;
                finalpen = repen;
            }
        } 

        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);
        
        let hintMessage = "Pada bagian kali ini silahkan masukkan hasil perkalian pecahan tanpa disederhanakan";
        assert(new Hint(hintMessage));
        hintMessage = "Kamu bisa menggunakan visualisasi disamping untuk melihat warna yang beririsan dibagi dengan seluruh kotak yang diberi warna";
        assert(new Hint(hintMessage));

        if(checkSAI({selection: rpemie, action: "UpdateTextField", input: finalpem}, null, true)){
            setSuccessOrBugMsg("<html>Jawaban yang kamu masukkan sudah dalam bentuk sederhana, masukkan hasil pecahan sebelum disederhanakan ya! </html>");
            modify(se, "errorResPembilang", 1);
            halt();
        }else if(checkSAI({selection: rpenie, action: "UpdateTextField", input: finalpen}, null, true) && ers2 == 1){
            setSuccessOrBugMsg("<html>Jawaban yang kamu masukkan sudah dalam bentuk sederhana, masukkan hasil pecahan sebelum disederhanakan ya! </html>");
            modify(se, "errorResPenyebut", 1);
            halt();
        }else if(checkSAI({selection: rpenie, action: "UpdateTextField", input: "don't_care"}, null, true)&& ers2 == 1){
            setSuccessOrBugMsg("<html>Jawban kamu masih salah. Masukkan nilai <b>" + repen + "</b> untuk bagian tersebut ya</html>");
            modify(se, "errorResPenyebut", 1);
            halt();
        }else if(checkSAI({selection: rpemie, action: "UpdateTextField", input: "don't_care"}, null, true)&& ers1 == 1){
            setSuccessOrBugMsg("<html>Jawban kamu masih salah. Masukkan nilai <b>" + repem + "</b> untuk bagian tersebut ya</html>");
            modify(se, "errorResPembilang", 1);
            console.log("hiya");
            halt();
        }  else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts("StudentError");
    }
}


rule simplifiedFinal{
    when{
        // Hanya bisa dilakukan apabila task sebelumnya telah selesai
        prb: Problem
        {done: dn};

        mu: multiplicationResult mu.done == true
        {repemIE: rpemie, repenIE: rpenie, repembilang: rpem, repenyebut: rpen};

        // Ambil fact tentang hasil akhir
        fr: finalRes fr.simpembilang == null || fr.simpenyebut == null
        {simpembilang: pem, simpenyebut: peny, simpenIE: penie,simpemIE: pemie};
    }then{
        let finalpem = 0;
        let finalpen = 0;
        let repem = rpem;

        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);

        let hintMessage = "Pada bagian kali ini silahkan masukkan hasil pecahan yang disederhanakan";
        assert(new Hint(hintMessage));

        hintMessage = "Coba pikirkan, apakah pembilang dan penyebut bisa dibagi angka yang sama? Mulailah dengan angka kecil seperti 2, 3, atau 5. Angka apa yang bisa membagi kedua angka ini tanpa sisa?";
        assert(new Hint(hintMessage));

        // Kalau pembilang == 1, otomatis tidak ada lagi penyederhanaan, set pembilang dan penyebut sama seperti hasil sebelumnya
        if(finalpem == 0 && finalpen == 0 && repem == 1){
            finalpem = rpem;
            finalpen = rpen;
        } else {
            // Kalau bukan coba cari faktor pembilangnya untuk mendapatkan nilai paling sederhana
            for (var i = 2; i <= rpem; i++){
                if(rpen % i == 0 && rpem % i == 0){
                    finalpem = rpem / i;
                    finalpen = rpen / i;
                }
            }

            // Kalau tidak ketemu, otomatis tidak ada penyederhanaan juga.
            if(finalpem == 0 && finalpen == 0){
                finalpem = rpem;
                finalpen = rpen;
            }
        }

        if(checkSAI({selection:penie, action:"UpdateTextField",input: finalpen}) && fr.simpembilang != null){
            modify(fr, "simpenyebut", finalpen);
            modify(prb, "done", true);
            setSuccessOrBugMsg("<html>Keren banget! Kamu sudah berhasil menyelesaikan soal ini! Klik tombol done untuk menyelesaikan soal ini!</html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: finalpem}) && fr.simpenyebut != null){
            modify(fr, "simpembilang", finalpem);
            modify(prb, "done", true);
            setSuccessOrBugMsg("<html>Keren banget! Kamu sudah berhasil menyelesaikan soal ini! Klik tombol done untuk menyelesaikan soal ini!</html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: finalpem})){
            modify(fr, "simpembilang", finalpem);
            setSuccessOrBugMsg("<html>Hebat, kamu benar! Ayo isi bagian yang masih kosong!</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: finalpen})){
            modify(fr, "simpenyebut", finalpen);
            setSuccessOrBugMsg("<html>Keren, kamu benar! Ayo isi bagian yang masih kosong!</html>");
            halt();
        }else {
            backtrack();
        }

        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");

    }
}

// Rule Bug Untuk Bagian Sederhanakan Pecahan
rule buggySimplifiedFinal2{
    salience: -1;
    when{
        // Masukkan memory error students
        se: StudentError se.errorSimplifiedPembilang == 1 || se.errorSimplifiedPenyebut == 1
        {errorSimplifiedPembilang: espm1, errorSimplifiedPenyebut: espn1};

        // Hanya bisa dilakukan apabila task sebelumnya telah selesai
         prb: Problem
         {done: dn};

         mu: multiplicationResult mu.done == true
        {repemIE: rpemie, repenIE: rpenie, repembilang: rpem, repenyebut: rpen};

        // Ambil fact tentang hasil akhir
        fr: finalRes fr.simpembilang == null || fr.simpenyebut == null
        {simpembilang: pem, simpenyebut: peny, simpenIE: penie,simpemIE: pemie};
    } then{
        let finalpem = 0;
        let finalpen = 0;
        let repem = rpem;
        let bugpem = 0;
        let bugpen = 0;

        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);

        if(finalpem == 0 && finalpen == 0 && repem == 1){
            finalpem = rpem;
            finalpen = rpen;
        } else {
            for (var i = 2; i <= rpem; i++){
                if(rpen % i == 0 && rpem % i == 0){
                    finalpem = rpem / i;
                    finalpen = rpen / i;
                }
            }

            if(finalpem == 0 && finalpen == 0){
                finalpem = rpem;
                finalpen = rpen;
            } else{
                bugpem = finalpem * 2;
                bugpen = finalpen * 2;
            }
        }
        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);
        console.log("bugpem: " + bugpem);

        if(checkSAI({selection:pemie, action:"UpdateTextField",input: "don't_care"}, null, true) && espm1 == 1){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Masukkan nilai <b>" + finalpem + "</b> </html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: "don't_care"}, null, true) && espn1 == 1){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Masukkan nilai <b>" + finalpen + "</b> </html>");
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        
    }
}

rule buggySimplifiedFinal1{
    salience: -2;
    when{
        // Masukkan memory error students
        se: StudentError
        {errorSimplifiedPembilang: espm1, errorSimplifiedPenyebut: espn1};

        // Hanya bisa dilakukan apabila task sebelumnya telah selesai
         prb: Problem
         {done: dn};

         mu: multiplicationResult mu.done == true
        {repemIE: rpemie, repenIE: rpenie, repembilang: rpem, repenyebut: rpen};

        // Ambil fact tentang hasil akhir
        fr: finalRes fr.simpembilang == null || fr.simpenyebut == null
        {simpembilang: pem, simpenyebut: peny, simpenIE: penie,simpemIE: pemie};
    } then{
        let finalpem = 0;
        let finalpen = 0;
        let repem = rpem;
        let bugpem = 0;
        let bugpen = 0;

        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);

        if(finalpem == 0 && finalpen == 0 && repem == 1){
            finalpem = rpem;
            finalpen = rpen;
        } else {
            for (var i = 2; i <= rpem; i++){
                if(rpen % i == 0 && rpem % i == 0){
                    finalpem = rpem / i;
                    finalpen = rpen / i;
                }
            }

            if(finalpem == 0 && finalpen == 0){
                finalpem = rpem;
                finalpen = rpen;
            } else{
                bugpem = finalpem * 2;
                bugpen = finalpen * 2;
            }
        }
        console.log("finpem: " + finalpem);
        console.log("finpen: " + finalpen);
        console.log("repem: " + repem);
        console.log("bugpem: " + bugpem);

        if(checkSAI({selection:pemie, action:"UpdateTextField",input: bugpem}, null, true) && bugpem == 0){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Nilai <b>" + bugpem + " </b> bukanlah jawaban sederhana ya</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: bugpen}, null, true) && bugpen == 0){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Nilai <b>" + bugpen + " </b> bukanlah jawaban sederhana ya</html>");
            halt();
        }else if(checkSAI({selection:pemie, action:"UpdateTextField",input: bugpem}, null, true)){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Nilai <b>" + bugpem + " </b> masih bisa disederhanakan lagi ya</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: bugpen}, null, true)){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Nilai <b>" + bugpen + " </b> masih bisa disederhanakan lagi ya</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: "don't_care"}, null, true) && fr.simpembilang != null){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Ingat bahwa sederhana berarti tidak ada lagi bilangan selain 1 yang dapat membagi pecahan tersebut</html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: "don't_care"}, null, true) && fr.simpenyebut != null){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Ingat bahwa sederhana berarti tidak ada lagi bilangan selain 1 yang dapat membagi pecahan tersebut</html>");
            halt();
        } else if(checkSAI({selection:pemie, action:"UpdateTextField",input: "don't_care"}, null, true)){
            modify(se, "errorSimplifiedPembilang", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Ingat bahwa sederhana berarti tidak ada lagi bilangan selain 1 yang dapat membagi pecahan tersebut</html>");
            halt();
        } else if(checkSAI({selection:penie, action:"UpdateTextField",input: "don't_care"}, null, true)){
            modify(se, "errorSimplifiedPenyebut", 1);
            setSuccessOrBugMsg("<html>Jawaban kamu masih belum benar! Ingat bahwa sederhana berarti tidak ada lagi bilangan selain 1 yang dapat membagi pecahan tersebut</html>");
            halt();
        } else {
            backtrack();
        }
        setTracerLogFlags("debug", "error", "conflict_tree", "sai_check", "modify");
        printFacts("StudentError");
    }
}




rule DoneRule {
    when {
        // Priksa kalau semua komponen sudah terisi
        prb : Problem prb.done == true;
    }
    then {
        let hintMessage = "Klik tombol 'Done' untuk menyelesaikan problem ini";
        assert(new Hint(hintMessage));

        
        if (checkSAI({selection: "done", action: "ButtonPressed", input: "don't_care"})) {
            halt(); 
        } else {
            backtrack(); 
        }
    }
}