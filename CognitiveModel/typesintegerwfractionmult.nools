// Definisikan working memory soal
define Problem{
    // Wholenum
    // fraction sebelah kanan ditandai dengan 1
    wholenum: null,
    pembilang1: null,
    penyebut1: null,
    wholenumIE: null,
    pembilang1IE: null,
    penyebut1IE: null,
    done: false,
    constructor: function(wn, en1, den1, wnie, enie1, denie1){
        this.wholenum = wn;
        this.pembilang1 = en1;
        this.penyebut1 = den1;
        this.wholenumIE = wnie;
        this.pembilang1IE = enie1;
        this.penyebut1IE = denie1;
    }
}

define StudentError{
    //Error student ada:
    //1. Untuk enter pembilang (ada 2)
    //2. Untuk enter penyebut (ada 2)
    //3. Untuk enter results (ada penyebut dan pembilang)
    //4. Untuk enter hasil sederhana (ada penyebut dan pembilang)
    errorWholenum: null,
    errorPenyebut1: null,
    errorPembilang1: null,
    errorResPembilang: null,
    errorResPenyebut: null,
    errorSimplifiedPembilang: null,
    errorSimplifiedPenyebut: null,
    
    constructor: function(wn, erpm1, erpn1, rpm, rpn, spm, spn){
      this.errorWholenum = wn;
      this.errorPembilang1 = erpm1;
      this.errorPenyebut1 = erpn1;
      this.errorResPembilang = rpm;
      this.errorResPenyebut = rpn;
      this.errorSimplifiedPembilang = spm;
      this.errorSimplifiedPenyebut = spn;
    }
}

define multiplicationResult {
    // wholenumber
    // fraction sebelah kanan ditandai dengan 2

    // wholenumber
    wholenumber : null,
    wholenumberIE : null,

    //pembilang fraction
    depembilang1: null,
    depembilang1IE: null,

    //penyebut fraction
    depenyebut1: null,
    depenyebut1IE: null,

    //results
    repembilang: null,
    repenyebut: null,
    repemIE: null,
    repenIE: null,
    done: false,
    
    constructor: function(wn, wnie, dpem1, dpem1ie, dpen1, dpen1ie, rpemIE, rpenIE){
        this.wholenumber = wn;
        this.wholenumberIE = wnie;
        this.depembilang1 = dpem1;
        this.depembilang1IE = dpem1ie;
        this.depenyebut1 = dpen1;
        this.depenyebut1IE = dpen1ie;
        this.repemIE = rpemIE;
        this.repenIE = rpenIE;
    }
}

define finalRes{
    //simplified
    simpembilang: null,
    simpenyebut: null,
    simpemIE: null,
    simpenIE: null,
    constructor: function(spem, spen, spemIE, spenIE){
        this.simpembilang = spem;
        this.simpenyebut = spen;
        this.simpenIE = spenIE;
        this.simpemIE = spemIE;
    }
}

// Tipe lainnya yang menjadi 'standar' untuk Nools model tracer.
// Bagian ini merepresentasikan input siswa dalam working memory milik tracer.
define StudentValues {
	selection: null,
	action: null,
	input: null,
	constructor: function(s,a,i) {
		this.selection = s;
		this.action = a;
		this.input = i;
	}
}

// Fungsi hint
define Hint {
  precedence: 0,
  msg: "",
  constructor: function(m, optPrecedence) {
  	this.msg = m;
  	this.precedence = optPrecedence || 0;
  }
}

define IsHintMatch {
  constructor: function() {
  }
}

// Fungsi TPA
define TPA {
  selection: null,
  action: null,
  input: null,
  constructor: function(s, a, i) {
  	if(Array.isArray(s)){
  		this.selection = s[0];
  		this.action = s[1];
  		this.input = s[2];
  	} else{
  		this.selection = s;
  		this.action = a;
  		this.input = i;
  	}
  }
}